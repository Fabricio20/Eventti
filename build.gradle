import java.nio.file.Files

plugins {
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}

group 'io.github.fabricio20'
version '1.4.0'
description 'A Java event framework'

sourceCompatibility = targetCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.slf4j:slf4j-api:2.0.3')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.1')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.9.1')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// -- Library build settings

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

javadoc {
    failOnError = true
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
}

// -- Maven Central & GitHub Packages Publishing

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.findProperty("sonatype.user") ?: System.getenv("SONATYPE_USER")
            password = project.findProperty("sonatype.pass") ?: System.getenv("SONATYPE_PASS")
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHub"
            url = uri("https://maven.pkg.github.com/Fabricio20/Eventti")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'Eventti'
                description = 'A Java event framework'
                url = 'https://github.com/Fabricio20/Eventti'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/Fabricio20/Eventti/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'Fabricio20'
                        name = 'Fabricio W'
                    }
                }
                scm {
                    url = 'https://github.com/Fabricio20/Eventti'
                    connection = 'scm:git://github.com/Fabricio20/Eventti.git'
                    developerConnection = 'scm:git://github.com/Fabricio20/Eventti.git'
                }
            }
        }
    }
}

String getSigningKey() {
    def signingKey
    def file = project.findProperty("singing.secretKeyFile")
    if (file != null && new File(file).exists()) {
        signingKey = new String(Files.readAllBytes(new File(file).toPath()))
    } else {
        signingKey = project.findProperty("signing.key") ?: System.getenv("GPG_KEY")
    }
    return signingKey
}

def singingKey = getSigningKey()

signing {
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("GPG_PASSWORD")
    useInMemoryPgpKeys(singingKey, signingPassword)
    sign publishing.publications.mavenJava
}
